#include <windows.h>
#include <windowsx.h>
#include <streams.h>
#include <commctrl.h>
#include <olectl.h>
#include <memory.h>
#include <stdlib.h>
#include <stdio.h>
#include <tchar.h>

#include "guids.h"

#include "resource.h"  // Autogenerated
#include "metadata_injector_interface.h"
#include "metadata_injector_properties.h"


CUnknown* MetadataInjectorProperties::CreateInstance(LPUNKNOWN lpunk, HRESULT* phr)
{
    ASSERT(phr);

    CUnknown* punk = new MetadataInjectorProperties(lpunk, phr);

    if (punk == NULL)
    {
        if (phr)
            *phr = E_OUTOFMEMORY;
    }

    return punk;
}


MetadataInjectorProperties::MetadataInjectorProperties(LPUNKNOWN pUnk, HRESULT* phr):
    CBasePropertyPage(L"Metdata Injector Properties", pUnk, IDD_DIRECTSHOW_METADATA_INJECTOR_FILTER_PROP, IDS_TITLE),
    mDMIFInterface(NULL),
    mIsInitialized(FALSE)
{
    ASSERT(phr);
}


INT_PTR MetadataInjectorProperties::OnReceiveMessage(HWND hwnd, UINT uMsg, WPARAM wParam, LPARAM lParam)
{
    switch (uMsg)
    {
    case WM_COMMAND:
    {
        if (mIsInitialized)
        {
            m_bDirty = TRUE;
            if (m_pPageSite)
            {
                m_pPageSite->OnStatusChange(PROPPAGESTATUS_DIRTY);
            }
        }
        return (LRESULT)1;
    }
    }

    return CBasePropertyPage::OnReceiveMessage(hwnd, uMsg, wParam, lParam);
}


HRESULT MetadataInjectorProperties::OnConnect(IUnknown* pUnknown)
{
    CheckPointer(pUnknown, E_POINTER);
    ASSERT(mDMIFInterface == NULL);

    HRESULT hr = pUnknown->QueryInterface(CLSID_METADATA_INJECTOR_INTERFACE, (void**)&mDMIFInterface);
    if (FAILED(hr))
        return E_NOINTERFACE;
    
    CheckPointer(mDMIFInterface, E_FAIL);

    char buffer[1024];
    mDMIFInterface->get_config_filename(&buffer[0]);

    mConfigFilename = buffer;

    mIsInitialized = FALSE;
    return NOERROR;
}



HRESULT MetadataInjectorProperties::OnDisconnect()
{
    if (mDMIFInterface)
    {
        mDMIFInterface->Release();
        mDMIFInterface = NULL;
    }

    return NOERROR;
} 


HRESULT MetadataInjectorProperties::OnActivate()
{
    std::wstring stemp = std::wstring(mConfigFilename.begin(), mConfigFilename.end());
    Edit_SetText(GetDlgItem(m_Dlg, IDC_CONFIG_FILENAME), stemp.c_str());

    mIsInitialized = TRUE;
    return NOERROR;
}


HRESULT MetadataInjectorProperties::OnDeactivate(void)
{
    ASSERT(mDMIFInterface);

    mIsInitialized = FALSE;
    GetControlValues();

    return NOERROR;
}


HRESULT MetadataInjectorProperties::OnApplyChanges()
{
    GetControlValues();

    CheckPointer(mDMIFInterface, E_POINTER);
    mDMIFInterface->set_config_filename(mConfigFilename.c_str());

    return NOERROR;
}


void MetadataInjectorProperties::GetControlValues()
{
    TCHAR sz[1024];
    Edit_GetText(GetDlgItem(m_Dlg, IDC_CONFIG_FILENAME), sz, sizeof(sz));

    char szANSI[1024];
    WideCharToMultiByte(CP_ACP, 0, sz, -1, szANSI, sizeof(szANSI), NULL, NULL);

    mConfigFilename = szANSI;
}
